Java Assingment-2
Bharati Wakchaure
Q1.Find the Fibonacci Series up to Nth Term in Java Language
a. Method 1: Using Iteration (Using Three variables)
b. Method 2: Using Recursion
c. Method 3: Using Formula a[i]=a[i-1]+a[i-2] (Using Array)

Program
package patterns;

public class Fib {

	   
	    public static void fibonacciIteration(int n) {
	        int first = 0, second = 1, third;
	        System.out.println("Fibonacci Series up to " + n + " terms (Iteration):");
	        for (int i = 1; i <= n; i++) {
	            if (i == 1) {
	                System.out.print(first + " ");
	                continue;
	            }
	            if (i == 2) {
	                System.out.print(second + " ");
	                continue;
	            }
	            third = first + second;
	            System.out.print(third + " ");
	            first = second;
	            second = third;
	        }
	        System.out.println();
	    }

	    // Method 2: Using Recursion
	    public static int fibonacciRecursion(int n) {
	        if (n <= 1) {
	            return n;
	        } else {
	            return fibonacciRecursion(n-1) + fibonacciRecursion(n-2);
	        }
	    }

	    
	    public static void printFibonacciRecursion(int n) {
	        System.out.println("Fibonacci Series up to " + n + " terms (Recursion):");
	        for (int i = 0; i < n; i++) {
	            System.out.print(fibonacciRecursion(i) + " ");
	        }
	        System.out.println();
	    }

	    // Method 3: Using Array
	    public static void fibonacciArray(int n) {
	        if (n <= 1) {
	            System.out.println("Fibonacci Series up to " + n + " term (Array):");
	            System.out.println(n == 1 ? "0" : "");
	            return;
	        }

	        int[] fibArray = new int[n];
	        fibArray[0] = 0;
	        fibArray[1] = 1;
	        System.out.println("Fibonacci Series up to " + n + " terms (Array):");
	        System.out.print(fibArray[0] + " " + fibArray[1] + " ");

	        for (int i = 2; i < n; i++) {
	            fibArray[i] = fibArray[i-1] + fibArray[i-2];
	            System.out.print(fibArray[i] + " ");
	        }
	        System.out.println();
	    }

	    public static void main(String[] args) {
	        int n = 10; 
	        fibonacciIteration(n);
	        printFibonacciRecursion(n);
	        fibonacciArray(n);
	    }
	}



Q2.2. Program to check Harshad number or not using Java
Hint: - Harshad number is a number or an integer in base 10 which is
completely divisible by sum of its digits.
Example :
Suppose a number 24 . Calculate the sum of digits of the number (2 +
4) = 6 .
Check whether the number entered by user is completely divisible by
sum of its digits or not.

PROGRAM 
package assignment2;

public class Harshad {

	    public static void main(String[] args)
		{
			
			int n = 47;
			int result = 0;
			
			while(n != 0)
			{
				int pick_last = n % 10;
				result = result + pick_last;
				n = n / 10;
			}
			
	      if(n % result == 0)
	      System.out.println("Harshad Number");
	          else
	        System.out.println("Not a Harshad Number");
	}
	}

3. Factorial of a Number using Recursion in Java
Program-
package assignment2;

public class Factorial{
	
		static int factorial(int n){    
			  if (n == 0)    
			    return 1;    
			  else    
			    return(n * factorial(n-1));    
			 }    
			 public static void main(String args[]){  
			  int i,fact=1;  
			  int number=4;   
			  fact = factorial(number);   
			  System.out.println("Factorial of "+number+" is: "+fact);    
			 }  
			}  




4. Java Program for Sorting first half in Ascending order and second half in
Descending order
Example
Input : arr[6] = [1, 90, 34, 89, 7, 9]
Output : 1 7 9 90 89 34
Program-
package assignment2;

public class sorting {

	 public static void main(String[] args) { 

	       
	       int [] arr = new int [] {10, 40, 30, 20}; 
	       int temp = 0; 

	       for (int i = 0; i < arr.length; i++) { 
	           for (int j = i+1; j < arr.length; j++) { if(arr[i] > arr[j]) { 
	                 temp = arr[i]; 
	                 arr[i] = arr[j]; 
	                 arr[j] = temp; 
	              } 
	           } 
	       } 

	    for (int i = 0; i < arr.length; i++) { 
	     System.out.print(arr[i] + " "); 
	   } 
	  } 
	}
5. Java program to count numbers of even and odd elements in an array
Program
package assignment2;

public class evenodd {

	public static void main(String[] args) {
		int a[]={1,2,5,6,3,2};  
		System.out.println("Odd Numbers:");  
		for(int i=0;i<a.length;i++){  
		if(a[i]%2!=0){  
		System.out.println(a[i]);  
		}  
		}  
		System.out.println("Even Numbers:");  
		for(int i=0;i<a.length;i++){  
		if(a[i]%2==0){  
		System.out.println(a[i]);  
		}  
		}  
		

	}

}
6. Java program for rotation of elements of array- left and right. An array is
said to be right rotated if all the selected elements were moved towards
right by one position.

Program-
package assignment2;

public class rightrotate {

	public static void main(String[] args) {
		 int [] arr = new int [] {1, 2, 3, 4, 5};     
	           
	        int n = 3;    
	           
	         
	        System.out.println("Original array: ");    
	        for (int i = 0; i < arr.length; i++) {     
	            System.out.print(arr[i] + " ");     
	        }      
	            
	          
	        for(int i = 0; i < n; i++){    
	            int j, last;    
	                
	            last = arr[arr.length-1];    
	            
	            for(j = arr.length-1; j > 0; j--){    
	                   
	                arr[j] = arr[j-1];    
	            }    
	               
	            arr[0] = last;    
	        }    
	        
	        System.out.println();    
	            
	        
	        System.out.println("Array after right rotation: ");    
	        for(int i = 0; i< arr.length; i++){    
	            System.out.print(arr[i] + " ");    
	        }    
	    }    
}
7.7. Rotate a matrix by 90 degree in clockwise direction in Java.
program-
package patterns;

public class Q2 {
		static int N = 4;
		
		static void rotate90Clockwise(int a[][])
		{
		 
		  
		    for (int i = 0; i < N / 2; i++)
		    {
		        for (int j = i; j < N - i - 1; j++)
		        {
		 
		            int temp = a[i][j];
		            a[i][j] = a[N - 1 - j][i];
		            a[N - 1 - j][i] = a[N - 1 - i][N - 1 - j];
		            a[N - 1 - i][N - 1 - j] = a[j][N - 1 - i];
		            a[j][N - 1 - i] = temp;
		        }
		    }
		}
		 
		static void printMatrix(int arr[][])
		{
		    for (int i = 0; i < N; i++)
		    {
		        for (int j = 0; j < N; j++)
		        System.out.print( arr[i][j] + " ");
		        System.out.println();
		    }
		}
		 
		 
		    public static void main (String[] args) 
		    {
		            int arr[][] = { { 1, 2, 3, 4 },
		                      { 5, 6, 7, 8 },
		                      { 9, 10, 11, 12 },
		                      { 13, 14, 15, 16 } };
		    rotate90Clockwise(arr);
		    printMatrix(arr);
		    }

	}


}
8. Create a student class with the following data members:- rollNo, Name,
Course, Mark, grade, result. Develop function members to
a. assign values for rollNo, name, course and mark.
b. Find out the grade for the student(if mark &gt;90, then grade is A, if
mark is between 80 and 90, then grade is B, if mark is between 70
and 80, then grade is C, if mark is between 60 and 70, then grade
is D, otherwise, grade is F.
c. Find the result of the student. If mark&gt;60, then the result is Pass,
otherwise Fail
d. Print out the details of the student
Program-
public class Student {
    int rollNo;
    String name;
    String course;
    int mark;
    char grade;
    String result;

       public void setValues(int r, String n, String c, int m) {
        rollNo = r;
        name = n;
        course = c;
        mark = m;
    }

  
    public void findGrade() {
        if (mark > 90) {
            grade = 'A';
        } else if (mark > 80) {
            grade = 'B';
        } else if (mark > 70) {
            grade = 'C';
        } else if (mark > 60) {
            grade = 'D';
        } else {
            grade = 'F';
        }
    }


    public void findResult() {
        if (mark > 60) {
            result = "Pass";
        } else {
            result = "Fail";
        }
    }

   
    public void printDetails() {
        System.out.println("Roll No: " + rollNo);
        System.out.println("Name: " + name);
        System.out.println("Course: " + course);
        System.out.println("Mark: " + mark);
        System.out.println("Grade: " + grade);
        System.out.println("Result: " + result);
    }

    public static void main(String[] args) {
              Student student1 = new Student();
        
               student1.setValues(101, "John Doe", "Computer Science", 85);
        
               student1.findGrade();
        student1.findResult();
        student1.printDetails();
    }
}
9. Create a class, named Account and include the required attributes and
behaviours in it. Inherit another class called “SavingsAccount” from it
and add new attributes and behaviours, as needed. Inherit another class
called “LoanAccount” from Account and add new attributes and
behaviours, as needed. Inherit another class called “HousingLoan” from
LoanAccount and add new attributes and behaviours, as needed. Create
objects of SavingsAccount and HousingLoan and perform the methods to
1. Open an account, 2. Deposit amount, 3. Withdraw amount, 4. Print
the account details. (Consider applying the Access Modifiers also)
Program-
class Account {
    protected int accountNumber;
    protected double balance;

    public Account(int accountNumber) {
        this.accountNumber = accountNumber;
        this.balance = 0;
    }

    public void deposit(double amount) {
        balance += amount;
        System.out.println(amount + " deposited successfully.");
    }

    public void withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            System.out.println(amount + " withdrawn successfully.");
        } else {
            System.out.println("Insufficient balance.");
        }
    }

    public void printAccountDetails() {
        System.out.println("Account Number: " + accountNumber);
        System.out.println("Balance: " + balance);
    }
}

class SavingsAccount extends Account {
    private double interestRate;

    public SavingsAccount(int accountNumber, double interestRate) {
        super(accountNumber);
        this.interestRate = interestRate;
    }

    public void calculateInterest() {
        double interest = balance * interestRate / 100;
        balance += interest;
        System.out.println("Interest calculated and added to the account.");
    }
}

class LoanAccount extends Account {
    protected double loanAmount;
    protected double interestRate;

    public LoanAccount(int accountNumber, double loanAmount, double interestRate) {
        super(accountNumber);
        this.loanAmount = loanAmount;
        this.interestRate = interestRate;
    }

    public void payEMI(double emiAmount) {
        if (balance >= emiAmount) {
            balance -= emiAmount;
            System.out.println("EMI paid successfully.");
        } else {
            System.out.println("Insufficient balance to pay EMI.");
        }
    }
}

class HousingLoan extends LoanAccount {
    private int tenure;

    public HousingLoan(int accountNumber, double loanAmount, double interestRate, int tenure) {
        super(accountNumber, loanAmount, interestRate);
        this.tenure = tenure;
    }

    public void printLoanDetails() {
        System.out.println("Loan Account Number: " + accountNumber);
        System.out.println("Loan Amount: " + loanAmount);
        System.out.println("Interest Rate: " + interestRate);
        System.out.println("Tenure: " + tenure + " years");
        System.out.println("Balance: " + balance);
    }
}

public class Main {
    public static void main(String[] args) {
        SavingsAccount savingsAccount = new SavingsAccount(1001, 5.0);
        savingsAccount.deposit(5000);
        savingsAccount.calculateInterest();
        savingsAccount.printAccountDetails();

        System.out.println();

        HousingLoan housingLoan = new HousingLoan(2001, 1000000, 8.5, 15);
        housingLoan.deposit(50000);
        housingLoan.payEMI(20000);
        housingLoan.printLoanDetails();
    }
}

